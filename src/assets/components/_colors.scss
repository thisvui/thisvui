* {
  .colored {
    color: $dark;
    @each $name, $pair in $colors {
      $color: nth($pair, 1);
      $color-invert: nth($pair, 2);
      &.is-#{$name} {
        color: rgba($color, var(--color-alpha));
        &.inverted {
          color: rgba($color-invert, var(--color-alpha));;
        }
      }
    }
  }
}
* {
  .bordered {
    border-color: $link;
    @each $name, $pair in $colors {
      $color: nth($pair, 1);
      $color-invert: nth($pair, 2);
      $border-color: rgba($color, var(--border-alpha));
      &.is-#{$name} {
        border-color: $border-color;
        &.inverted {
          border-color: rgba($color-invert, var(--border-alpha));
        }
        &.after::after {
          border-color: $border-color;
        }
        &.focused {
          border-color: darken($color, 15%);
        }
      }
    }
  }
}
.filled {
  background-color: lighten($dark, 60%);
  transition: all cubic-bezier(.47,0,.74,.71) 200ms;
  &.hoverable:hover {
    background-color: lighten($dark, 50%);
  }
  &.activable:active {
    background-color: darken($dark, 12%);
  }
  &.is-loading::after{
    border-color: $dark-invert !important
  }
  &.inverted {
    color: $dark;
    background-color: rgba($dark-invert, var(--bg-alpha));
  }
  &.disabled{
    background-color: lighten($grey, 40%) !important;
    color: lighten($grey, 20%) !important;
  }
  &.ripple:hover {
    background: lighten($dark, 50%) radial-gradient(circle, transparent 1%, lighten($dark, 50%) 1%) center/15000%;
  }
  &.ripple:active {
    background-color: lighten($dark, 60%);
    background-size: 100%;
    transition: background 0s;
  }
  &.remove-init{
    background-color: unset;
  }
  &.transparent {
    background-color: transparent !important;
  }
  @each $name, $pair in $colors {
    $color: nth($pair, 1);
    $color-invert: nth($pair, 2);
    &.is-#{$name} {
      color: $color-invert;
      background-color: rgba($color, var(--bg-alpha));
      & > a {
        color: $color-invert;
      }
      &.hoverable:hover {
        background-color: lighten($color, 12%);
      }
      &.activable:active {
        background-color: darken($color, 12%);
      }
      &.active {
        background-color: darken($color, 7%);
      }
      &.inactive {
        background-color: lighten($color, 7%);
      }
      &.is-loading::after{
        border-color: $color-invert !important
      }
      &.inverted {
        color: $color;
        background-color: rgba($color-invert, var(--bg-alpha));
      }
      &.ripple:hover {
        background: $color radial-gradient(circle, transparent 1%, $color 1%) center/15000%;
      }
      &.ripple:active {
        background-color: lighten($color, 10%);
        background-size: 100%;
        transition: background 0s;
      }
      &.linear {
        $gradient-top-left: darken(saturate(adjust-hue($color, -7deg), 7%), 10%);
        $gradient-bottom-right: lighten(saturate(adjust-hue($color, 7deg), 4%), 5%);
        @include linear-gradient(141deg, $gradient-top-left 0%, $color 71%, $gradient-bottom-right 100%);
      }
      &.radial {
        $innerColor: lighten(adjust-hue($color, 2deg), 5%);
        $outerColor: darken(adjust-hue($color, -2deg), 10%);
        @include radial-gradient($innerColor, $outerColor);
      }
    }
  }
}
* {
  .hovered {
    &:hover{
      color: $dark;
      background-color: lighten($dark, 60%);
    }
    @each $name, $pair in $colors {
      $color: nth($pair, 1);
      $color-invert: nth($pair, 2);
      &.is-#{$name} {
        &:hover{
          color: $color-invert;
          background-color: rgba($color, var(--bg-hover-alpha));
        }
      }
    }
  }
}

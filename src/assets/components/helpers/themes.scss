* {
  .colored {
    color: $dark;
    @each $name, $pair in $colors {
      $color: nth($pair, 1);
      $color-invert: nth($pair, 2);
      &.is-#{$name} {
        color: rgba($color, var(--color-alpha));
        &.inverted {
          color: rgba($color-invert, var(--color-alpha));
        }
      }
    }
  }
}
* {
  .bordered {
    border-color: $link;
    @each $name, $pair in $colors {
      $color: nth($pair, 1);
      $color-invert: nth($pair, 2);
      $border-color: rgba($color, var(--border-alpha));
      &.is-#{$name} {
        border-color: $border-color;
        &.inverted {
          border-color: rgba($color-invert, var(--border-alpha));
        }
        &.after::after {
          border-color: $border-color;
        }
        &.focused {
          border-color: darken($color, 15%);
        }
        &.halftone {
          border-color: tint($color, 50%);
        }
        &.quarter-tone {
          border-color: tint($color, 25%);
        }
      }
    }
  }
}
.filled {
  $bg-color-base: $white-bis;
  background-color: $white-bis;
  transition: all cubic-bezier(0.47, 0, 0.74, 0.71) 200ms;
  &.hoverable:hover {
    background-color: shade($white-bis, 50%);
  }
  &.activable:active {
    background-color: shade($white-bis, 12%);
  }
  &.is-loading::after {
    border-color: $grey-dark !important;
  }
  &.inverted {
    color: $white-bis;
    background-color: rgba($dark, var(--bg-alpha));
  }
  &.disabled {
    background-color: lighten($grey, 40%) !important;
    color: lighten($grey, 20%) !important;
  }
  &.ripple:hover {
    background: lighten($dark, 50%)
      radial-gradient(circle, transparent 1%, lighten($dark, 50%) 1%)
      center/15000%;
  }
  &.ripple:active {
    background-color: lighten($dark, 60%);
    background-size: 100%;
    transition: background 0s;
  }
  &.remove-init {
    background-color: unset;
  }
  &.transparent {
    background-color: transparent !important;
  }
  &.darken {
    background-color: darken($bg-color-base, 10%);
  }
  &.lighten {
    background-color: lighten($bg-color-base, 10%);
  }
  @each $name, $pair in $colors {
    $color: nth($pair, 1);
    $color-invert: nth($pair, 2);
    &.is-#{$name} {
      color: $color-invert;
      background-color: rgba($color, var(--bg-alpha));
      & > a {
        color: $color-invert;
      }
      &.uncolored {
        color: inherit;
      }
      &.hoverable:hover {
        background-color: tint($color, 25%);
      }
      &.activable:active {
        background-color: shade($color, 25%);
      }
      &.is-loading::after {
        border-color: $color-invert !important;
      }
      &.inverted {
        color: $color;
        background-color: rgba($color-invert, var(--bg-alpha));
      }
      &.ripple:hover {
        background: $color
          radial-gradient(circle, transparent 1%, $color 1%)
          center/15000%;
      }
      &.ripple:active {
        background-color: lighten($color, 10%);
        background-size: 100%;
        transition: background 0s;
      }
      &.darken {
        background-color: shade($color, 80%);
      }
      &.lighten {
        background-color: tint($color, 80%);
      }
      &.halftone {
        background-color: tint($color, 50%);
      }
      &.quarter-tone {
        background-color: tint($color, 25%);
      }
      &.linear {
        $gradient-top-left: darken(
          saturate(adjust-hue($color, -7deg), 7%),
          10%
        );
        $gradient-bottom-right: lighten(
          saturate(adjust-hue($color, 7deg), 4%),
          5%
        );
        @include linear-gradient(
          141deg,
          $gradient-top-left 0%,
          $color 71%,
          $gradient-bottom-right 100%
        );
      }
      &.radial {
        $innerColor: lighten(adjust-hue($color, 2deg), 5%);
        $outerColor: darken(adjust-hue($color, -2deg), 10%);
        @include radial-gradient($innerColor, $outerColor);
      }
    }
  }
}

.striped {
  @each $name, $pair in $colors {
    $color: nth($pair, 1);
    $color-invert: nth($pair, 2);
    &.is-#{$name} {
      tr:nth-child(odd) {
        $stripped-color: rgba($color, 0.2);
        background-color: $stripped-color;
        &:hover {
          color: $color-invert;
          background-color: rgba($color, var(--bg-hover-alpha));
          &.has-color {
            color: $color-invert;
          }
        }
      }
    }
  }
}

* {
  .hovered {
    &.has-color {
      color: $dark;
    }
    &:hover {
      color: $dark;
      background-color: tint($dark, 50%);
    }
    @each $name, $pair in $colors {
      $color: nth($pair, 1);
      $color-invert: nth($pair, 2);
      &.is-#{$name} {
        &:hover {
          color: $color-invert;
          background-color: rgba($color, var(--bg-hover-alpha));
          &.has-color {
            color: $color-invert;
          }
        }
      }
    }
  }
}

@each $name, $pair in $colors {
  $color: nth($pair, 1);

  .color-#{$name} {
    color: $color !important;
  }

  a.color-#{$name} {
    &:hover,
    &:focus {
      color: shade($color, 20%) !important;
    }
  }

  .bg-#{$name} {
    background-color: $color !important;
  }
}

@each $name, $shade in $shades {
  .color-#{$name} {
    color: $shade !important;
  }

  .bg-#{$name} {
    background-color: $shade !important;
  }
}

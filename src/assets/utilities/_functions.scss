@function bottom-shadow($depth) {
  $primary-offset: nth(1 3 10 14 19 25 33, $depth) * 1px;
  $blur: nth(3 6 14 20 25 28 33, $depth) * 1px;
  $color: rgba(black, nth(0.12 0.16 0.19 0.25 0.3 0.31 0.33, $depth));

  @return 0 $primary-offset $blur $color;
}

@function top-shadow($depth) {
  $primary-offset: nth(1 3 6 10 15 21 28, $depth) * 1px;
  $blur: nth(1 3 3 5 6 7 7, $depth) * 2px;
  $color: rgba(black, nth(0.24 0.23 0.23 0.22 0.22 0.22 0.22, $depth));

  @return 0 $primary-offset $blur $color;
}

@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and
    index($convertable-units, $unit)
  {
    @return $value /
      nth($conversion-factors, index($convertable-units, unit($value))) *
      nth($conversion-factors, index($convertable-units, $unit));
  }

  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

@function is-direction($value) {
  $is-direction: index(
    (
      to top,
      to top right,
      to right top,
      to right,
      to bottom right,
      to right bottom,
      to bottom,
      to bottom left,
      to left bottom,
      to left,
      to left top,
      to top left
    ),
    $value
  );
  $is-angle: type-of($value) == "number" and
    index("deg" "grad" "turn" "rad", unit($value));

  @return $is-direction or $is-angle;
}

@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }

  $conversion-map: (
    to top: bottom,
    to top right: bottom left,
    to right top: left bottom,
    to right: left,
    to bottom right: top left,
    to right bottom: left top,
    to bottom: top,
    to bottom left: top right,
    to left bottom: right top,
    to left: right,
    to left top: right bottom,
    to top left: bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - convert-angle($value, "deg");
}

@function columns($i) {
  @return calc(#{$i} * var(--column-unit));
}

@function gutters($i) {
  @return calc(#{$i} * var(--gutter-unit));
}

@function column-spans($i) {
  @return calc(#{$i} * var(--column-and-gutter-unit) - var(--gutter-unit));
}

@function gutter-spans($i) {
  @return calc(#{$i} * var(--column-and-gutter-unit) - var(--column-unit));
}

@function mix-units($columns, $gutters: $columns) {
  @return calc(
    (#{$columns} * var(--column-unit)) + (#{$gutters} * var(--gutter-unit))
  );
}

/** Slightly lighten a color
    @param {Color} $color - color to tint
    @param {Number} $percentage - percentage of `$color` in returned color
    @return {Color} */
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/** Slightly darken a color
    @param {Color} $color - color to tint
    @param {Number} $percentage - percentage of `$color` in returned color
    @return {Color} */
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}
